# OpenX - Advanced Open Redirect Vulnerability Scanner Development Prompt

## Project Overview
Build a comprehensive Python-based open redirect vulnerability scanner called "OpenX" that can detect and exploit open redirect vulnerabilities across various input methods and configurations.

## Core Requirements

### 1. Command Line Interface
Implement the exact argument structure provided:

```
usage: openx [-h] (-u URL | -l LIST | -e DOMAIN_OR_FILE)
                [--e-gau | --e-wayback] [-o OUTPUT] [-c CALLBACK]
                [--headers] [--payloads PAYLOADS] [--threads THREADS]
                [--timeout TIMEOUT] [--delay DELAY]
                [--user-agent USER_AGENT] [--proxy PROXY]
                [--follow-redirects FOLLOW_REDIRECTS] [--status-codes]
                [--verbose] [--silent] [-f] [-s] [-r]
```

### 2. Target Input Methods
- **Single URL (-u)**: Test individual URLs
- **URL List (-l)**: Process file containing multiple URLs (one per line)
- **External Tool Integration (-e)**: Gather URLs using gau or waybackurls
  - Support both domain input and file containing domains
  - Implement `--e-gau` and `--e-wayback` flags for tool selection
  - Auto-detect and use available tools if flags not specified

### 3. Core Scanning Features

#### Payload Management
- Built-in comprehensive payload list covering:
  - Basic redirects (http://evil.com, https://evil.com)
  - Protocol manipulation (//evil.com, ///evil.com)
  - URL encoding variations (%2F%2Fevil.com)
  - Double encoding (%252F%252Fevil.com)
  - Unicode bypasses (\uFF0F\uFF0Fevil.com)
  - Mixed encoding techniques
  - Callback URL integration when specified
- Support custom payload files via `--payloads` parameter
- Parameter detection for common redirect parameters (redirect, url, return, etc.)

#### Request Handling
- Multi-threaded scanning with configurable thread count
- Configurable timeout and delay between requests
- Custom user-agent support
- HTTP/HTTPS proxy support
- Redirect following with depth control
- Header-based injection testing when `--headers` flag is used

#### Vulnerability Detection
- Analyze HTTP response codes and headers
- Detect successful redirects to external domains
- Check for Location header manipulation
- Identify reflected payloads in responses
- Validate actual redirect behavior vs. intended behavior

### 4. Output and Reporting

#### Output Formats
- Console output with color coding (green for vulnerabilities, red for errors)
- File output with auto-format detection (.txt, .json, .csv)
- Include severity levels (High, Medium, Low) based on exploitability

#### Verbose Information
- Request/response details when verbose mode enabled
- HTTP status codes display
- Response headers for found vulnerabilities
- Error logging and debugging information

### 5. Performance and Filtering Options
- **Fast mode (-f)**: Stop testing URL after first vulnerability found
- **Small mode (-s)**: Filter to common redirect parameters only
- **Silent mode**: Suppress banner and non-essential output
- Implement rate limiting and respectful scanning practices

### 6. Technical Implementation Requirements

#### Dependencies
```python
# Core dependencies to include
import requests
import argparse
import threading
import json
import csv
import urllib.parse
import re
import subprocess
import time
import sys
from concurrent.futures import ThreadPoolExecutor
from colorama import Fore, Style, init
```

#### Error Handling
- Robust exception handling for network errors
- Graceful handling of malformed URLs
- Timeout management for hung requests
- Thread-safe logging and output

#### External Tool Integration
- Check for gau and waybackurls availability
- Execute external commands safely
- Parse and process external tool outputs
- Handle tool failures gracefully

### 7. Security Considerations
- Validate input URLs to prevent command injection
- Sanitize file paths for output
- Implement safe subprocess execution
- Rate limiting to avoid overwhelming targets
- Respect robots.txt when feasible

### 8. Code Structure
```
openx/
├── openx.py (main entry point)
├── scanner/
│   ├── __init__.py
│   ├── core.py (main scanning logic)
│   ├── payloads.py (payload management)
│   ├── utils.py (utility functions)
│   └── external.py (gau/waybackurls integration)
├── output/
│   ├── __init__.py
│   └── formatters.py (output formatting)
└── requirements.txt
```

### 9. Example Usage Scenarios
The tool should handle these use cases effectively:
```bash
# Single URL scan
python openx.py -u "https://example.com/redirect?url="

# List of URLs with custom payloads
python openx.py -l urls.txt --payloads custom.txt -o results.json

# Domain enumeration with gau
python openx.py -e example.com --e-gau -s -f

# Advanced scanning with proxy and custom headers
python openx.py -u "https://target.com" --headers --proxy http://127.0.0.1:8080 -v
```

### 10. Quality Requirements
- Clean, maintainable code with proper documentation
- Comprehensive error messages and help text
- Performance optimization for large URL sets
- Cross-platform compatibility (Windows, Linux, macOS)
- Professional CLI tool appearance with proper banners and formatting

## Deliverables
1. Complete Python implementation
2. Requirements.txt file
3. README.md with installation and usage instructions
4. Example payload files
5. Test cases demonstrating functionality